---
name: CI
permissions:
  contents: read

on:
  pull_request:
    branches:
      - master
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  release-setup:
    name: Release Setup
    outputs:
      publish_release: ${{ steps.release-setup.outputs.publish_release }}
      release_body: ${{ steps.release-setup.outputs.release_body }}
      release_commit: ${{ steps.release-setup.outputs.release_commit }}
      release_generate_release_notes: ${{ steps.release-setup.outputs.release_generate_release_notes }}
      release_tag: ${{ steps.release-setup.outputs.release_tag }}
      release_version: ${{ steps.release-setup.outputs.release_version }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Release Setup
        id: release-setup
        uses: LizardByte/actions/actions/release_setup@v2025.715.25226
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build
    needs:
      - release-setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade -r requirements.txt
          python -m pip install --upgrade -r requirements-dev.txt

      - name: Test with pytest
        id: test
        env:
          CI_EVENT_ID: ${{ github.event.number || github.sha }}
          GITHUB_PYTEST: "true"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_TEST_BOT_TOKEN }}
          DISCORD_GITHUB_STATUS_CHANNEL_ID: ${{ vars.DISCORD_GITHUB_STATUS_CHANNEL_ID }}
          DISCORD_REDDIT_CHANNEL_ID: ${{ vars.DISCORD_REDDIT_CHANNEL_ID }}
          DISCORD_SPONSORS_CHANNEL_ID: ${{ vars.DISCORD_SPONSORS_CHANNEL_ID }}
          GRAVATAR_EMAIL: ${{ secrets.GRAVATAR_EMAIL }}
          IGDB_CLIENT_ID: ${{ secrets.TWITCH_CLIENT_ID }}
          IGDB_CLIENT_SECRET: ${{ secrets.TWITCH_CLIENT_SECRET }}
          PRAW_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          PRAW_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          REDDIT_USERNAME: ${{ secrets.REDDIT_USERNAME }}
          REDDIT_PASSWORD: ${{ secrets.REDDIT_PASSWORD }}
        shell: bash
        run: |
          python -m pytest \
            -rxXs \
            --tb=native \
            --verbose \
            --color=yes \
            --cov=src \
            --junitxml=junit.xml \
            -o junit_family=legacy \
            tests

      - name: Upload test results
        # any except canceled or skipped
        if: >-
          always() &&
          (steps.test.outcome == 'success' || steps.test.outcome == 'failure') &&
          startsWith(github.repository, 'LizardByte/')
        uses: codecov/test-results-action@v1
        with:
          fail_ci_if_error: true
          files: junit.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

      - name: Upload coverage
        # any except canceled or skipped
        if: >-
          always() &&
          (steps.test.outcome == 'success' || steps.test.outcome == 'failure') &&
          startsWith(github.repository, 'LizardByte/')
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  build-docker:
    name: Docker
    needs: release-setup
    permissions:
      contents: read
      packages: write
    uses: LizardByte/.github/.github/workflows/__call-docker.yml@master
    with:
      maximize_build_space: false
      publish_release: ${{ needs.release-setup.outputs.publish_release }}
      release_commit: ${{ needs.release-setup.outputs.release_commit }}
      release_tag: ${{ needs.release-setup.outputs.release_tag }}
      release_version: ${{ needs.release-setup.outputs.release_version }}
    secrets:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
      DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      GH_BOT_NAME: ${{ secrets.GH_BOT_NAME }}
      GH_BOT_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: Create Release
    if: >-
      (github.event_name == 'push' && github.ref == 'refs/heads/master') &&
      needs.release-setup.outputs.publish_release == 'true'
    needs:
      - release-setup
      - build
      - build-docker
    runs-on: ubuntu-latest
    steps:
      - name: Create/Update GitHub Release
        uses: LizardByte/actions/actions/release_create@v2025.715.25226
        with:
          allowUpdates: true
          artifacts: ''
          body: ${{ needs.release-setup.outputs.release_body }}
          generateReleaseNotes: ${{ needs.release-setup.outputs.release_generate_release_notes }}
          name: ${{ needs.release-setup.outputs.release_tag }}
          prerelease: true
          tag: ${{ needs.release-setup.outputs.release_tag }}
          token: ${{ secrets.GH_BOT_TOKEN }}
